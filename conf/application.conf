# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = gatekeeper-email
appUrl="http://"${appName}".protected.mdtp"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"
play.modules.enabled += "uk.gov.hmrc.gatekeeperemail.MicroserviceModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

play.modules.enabled += "uk.gov.hmrc.objectstore.client.play.modules.ObjectStoreModule"
play.modules.enabled += "uk.gov.hmrc.gatekeeperemail.config.ConfigurationModule"
play.modules.enabled += "uk.gov.hmrc.gatekeeperemail.stride.config.ConfigurationModule"


# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "uk.gov.hmrc.gatekeeperemail.scheduled.SchedulerModule"
play.modules.enabled += "uk.gov.hmrc.gatekeeperemail.scheduled.SchedulerPlayModule"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

}



# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/gatekeeper-email?rm.monitorRefreshMS=4000&rm.failover=default"
  ttlInYears = 7
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
     auth {
      protocol = http
      host = localhost
      port = 8500
    }

    stride-auth-frontend {
      protocol = http
      host = localhost
      port = 9041
    }

    email {
      host = localhost
      port = 8300
    }

    developer-email-renderer {
      host = localhost
      port = 8955
    }

    object-store {
      host = localhost
      port = 8464
    }

    third-party-developer {
      host = localhost
      port = 9615
    }

    api-platform-microservice {
      host = localhost
      port = 9602
      use-proxy = false
    }

  }
}

stride {
  origin = ${appName}

  success-url-base = "http://localhost:9683"

  roles {
    super-user = "super-user-role"
    user = "user-role"
    admin = "admin-role"
  }
}

internal-auth.token = "1113"
object-store.default-retention-period = 1-month

